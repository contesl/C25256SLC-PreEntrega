// index.js
/*
‚úÖ GET products ‚Üí todos los productos
‚úÖ GET products/<id> ‚Üí producto espec√≠fico
‚úÖ POST products <title> <price> <category> ‚Üí crear producto
‚úÖ PUT products/<id> <title> <price> <category> ‚Üí actualizar producto
‚úÖ DELETE products/<id> ‚Üí eliminar producto

Ejemplos de uso:
üîπ Consultar todos los productos
npm run start GET products

üîπ Consultar un producto espec√≠fico
npm run start GET products/15

üîπ Crear un nuevo producto
npm run start POST products "T-Shirt-Rex" 300 "remeras"

üîπ Actualizar un producto
npm run start PUT products/7 "Camisa Azul" 450 "camisas"

üîπ Eliminar un producto
npm run start DELETE products/7

üëâ Con esto ya ten√©s un mini cliente CLI para la FakeStore API (CRUD).
*/
import fetch from "node-fetch";

const args = process.argv.slice(2);
const [method, resource, ...rest] = args;

const API_URL = "https://fakestoreapi.com";

async function main() {
  try {
    if (method === "GET") {
      // GET all products
      if (resource === "products") {
        const res = await fetch(`${API_URL}/products`);
        const data = await res.json();
        console.log("üì¶ Lista de productos:");
        console.log(data);
      }
      // GET single product
      else if (resource.startsWith("products/")) {
        const productId = resource.split("/")[1];
        const res = await fetch(`${API_URL}/products/${productId}`);
        const data = await res.json();
        console.log(`üì¶ Producto con ID ${productId}:`);
        console.log(data);
      } else {
        console.log("‚ùå Recurso no reconocido para GET.");
      }
    }

    else if (method === "POST" && resource === "products") {
      const [title, price, category] = rest;
      if (!title || !price || !category) {
        console.log("‚ö†Ô∏è Debes indicar: <title> <price> <category>");
        return;
      }

      const newProduct = { title, price: Number(price), category };

      const res = await fetch(`${API_URL}/products`, {
        method: "POST",
        body: JSON.stringify(newProduct),
        headers: { "Content-Type": "application/json" }
      });

      const data = await res.json();
      console.log("‚úÖ Producto creado con √©xito. ID:", data.id);
      console.log(data);
    }

    else if (method === "PUT" && resource.startsWith("products/")) {
      const productId = resource.split("/")[1];
      const [title, price, category] = rest;

      if (!title || !price || !category) {
        console.log("‚ö†Ô∏è Debes indicar: <title> <price> <category>");
        return;
      }

      const updatedProduct = { title, price: Number(price), category };

      const res = await fetch(`${API_URL}/products/${productId}`, {
        method: "PUT",
        body: JSON.stringify(updatedProduct),
        headers: { "Content-Type": "application/json" }
      });

      const data = await res.json();
      console.log(`‚úèÔ∏è Producto con ID ${productId} actualizado:`);
      console.log(data);
    }

    else if (method === "DELETE" && resource.startsWith("products/")) {
      const productId = resource.split("/")[1];

      const res = await fetch(`${API_URL}/products/${productId}`, {
        method: "DELETE"
      });

      const data = await res.json();
      console.log(`üóëÔ∏è Producto con ID ${productId} eliminado:`);
      console.log(data);
    }

    else {
      console.log("‚ùå Comando no reconocido.");
      console.log("Ejemplos v√°lidos:");
      console.log("npm run start GET products");
      console.log("npm run start GET products/15");
      console.log("npm run start POST products <title> <price> <category>");
      console.log("npm run start PUT products/<id> <title> <price> <category>");
      console.log("npm run start DELETE products/<id>");
    }

  } catch (error) {
    console.error("‚ö†Ô∏è Error al consultar la API:", error.message);
  }
}

main();

